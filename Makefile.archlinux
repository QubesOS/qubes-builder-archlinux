# Makefile for Archlinux packages build
#
# For "API" documentation check Makefile.generic
#
# Variables supposed to be in component's Makefile.builder:
#  ARCH_BUILD_DIRS - list of archlinux directories containing build sripts (PKGFILES...)

### Variables required as per Makefile.generic:
#
#   PACKAGE_LIST - list of packages to build. Targets 'build-dep', 'package' and 'copy-out'
#     will be run for each word on the list, with PACKAGE set to current word
#   DIST_BUILD_DIR - basedir for sources inside of chroot - relative to
#     CHROOT_DIR (qubes-src will be created in this directory)
#
PACKAGE_LIST = $(ARCH_BUILD_DIRS)
DIST_BUILD_DIR = /home/user

### Local variables
RUN_AS_USER = user

PACMAN_MIRROR ?= http://mirror.rackspace.com


DEBUG ?= 0
ifneq ($(DEBUG),0)
  $(info ╔══ DEBUG ══════════════════════════════════════════════════════════════════════)
  $(info ║ Repo Variables)
  $(info ╠───────────────────────────────────────────────────────────────────────────────)
  $(info ║ SRC_DIR:               $(SRC_DIR))                # qubes-src
  $(info ║ CHROOT_DIR:            $(CHROOT_DIR))             # /home/user/qubes-builder/chroot-archlinux
  $(info ║ BUILDER_REPO_DIR:      $(BUILDER_REPO_DIR))       # /home/user/qubes-builder/qubes-packages-mirror-repo/archlinux
  $(info ╠───────────────────────────────────────────────────────────────────────────────)
  $(info ║ Chroot Variables)
  $(info ╠───────────────────────────────────────────────────────────────────────────────)
  $(info ║ CHROOT_DIR:            $(CHROOT_DIR))             #
  $(info ║ DIST_BUILD_DIR:        $(DIST_BUILD_DIR))         # /home/user
  $(info ║ DIST_SRC:              $(DIST_SRC))               # /home/user/qubes-src/repo
  $(info ╠───────────────────────────────────────────────────────────────────────────────)
  $(info ║ Build Variables)
  $(info ╠───────────────────────────────────────────────────────────────────────────────)
  $(info ║ ARCHLINUX_PLUGIN_DIR:  $(ARCHLINUX_PLUGIN_DIR))   # /home/user/qubes-builder/qubes-src/builder-archlinux
  $(info ║ CACHEDIR:              $(CACHEDIR))               # cache/archlinux
  $(info ║ PACKAGE_LIST:          $(PACKAGE_LIST))           # archlinux
  $(info ║ DISTRIBUTION:          $(DISTRIBUTION))           # archlinux
  $(info ║ DIST:                  $(DIST))                   #
  $(info ║ COMPONENT:             $(COMPONENT))              #
  $(info ║ PACKAGE_SET:           $(PACKAGE_SET))            # vm
  $(info ║ CHROOT_ENV:            $(CHROOT_ENV))             # BACKEND_VMM=xen
  $(info ╠───────────────────────────────────────────────────────────────────────────────)
  $(info ║ Repository Variables)
  $(info ╠───────────────────────────────────────────────────────────────────────────────)
  $(info ║ UPDATE_REPO:           $(UPDATE_REPO))            #
  $(info ║ REPO_PROXY:            $(REPO_PROXY))             #
  $(info ║ ARCHLINUX_SRC_PREFIX:  $(ARCHLINUX_SRC_PREFIX))   # http://mirrors.kernel.org/archlinux
  $(info ║ ARCHLINUX_REL_VERSION: $(ARCHLINUX_REL_VERSION))  #
  $(info ║ PACMAN_MIRROR:         $(PACMAN_MIRROR))          # mirror.rackspace.com
  $(info ╚═══════════════════════════════════════════════════════════════════════════════)
endif

### Targets required by Makefile.generic to build packages:

# dist-prepare-chroot - initial preparation of chroot environment
#   Specifically, load mounts for the build chroot
dist-prepare-chroot: $(CHROOT_DIR)/home/user/.prepared_base
	@echo "--> Archlinux dist-prepare-chroot (makefile):"
	@echo "  --> Checking mounting of dev/proc/sys on build chroot..."
	@if [ ! -r "$(CHROOT_DIR)/proc/cpuinfo" ]; then\
		echo "    --> sudo mount -t proc proc $(CHROOT_DIR)/proc;";\
		sudo mount -t proc proc "$(CHROOT_DIR)/proc";\
	fi
	@if [ ! -r "$(CHROOT_DIR)/dev/zero" ]; then\
		echo "    --> sudo mount --bind /dev $(CHROOT_DIR)/dev;";\
		sudo mount --bind /dev "$(CHROOT_DIR)/dev";\
	fi
	@if [ ! -r "$(CHROOT_DIR)/dev/pts/0" ]; then\
		echo "    --> sudo mount --bind /dev/pts $(CHROOT_DIR)/dev/pts;";\
		sudo mount --bind /dev/pts "$(CHROOT_DIR)/dev/pts";\
	fi
	@if [ ! -d "$(CHROOT_DIR)/sys/dev" ]; then\
		echo "    --> sudo mount --bind /sys $(CHROOT_DIR)/sys;";\
		sudo mount --bind /sys "$(CHROOT_DIR)/sys";\
	fi
	@sudo mkdir -p "$(CACHEDIR)/pacman_cache/pkg"
	@sudo touch "$(CACHEDIR)/pacman_cache/pkg/.mnt"
	@# qubes pkgs may be from old runs and no longer match the repo hashes
	@sudo rm "$(CACHEDIR)/pacman_cache/pkg"/qubes-*.pkg.tar.* 2>/dev/null || true
	@if ! [ -r "$(CHROOT_DIR)/var/cache/pacman/pkg/.mnt" ]; then\
		echo "    --> sudo mount --bind "$(CACHEDIR)/pacman_cache" "$(CHROOT_DIR)/var/cache/pacman";"; \
		mkdir -p "$(CHROOT_DIR)/var/cache/pacman";\
		sudo mount --bind "$(CACHEDIR)/pacman_cache" "$(CHROOT_DIR)/var/cache/pacman";\
	fi
	@mkdir -p "$(BUILDER_REPO_DIR)/pkgs"
	@if ! [ -d "$(CHROOT_DIR)/tmp/qubes-packages-mirror-repo/pkgs" ]; then\
		echo "    --> sudo mount --bind "$(BUILDER_REPO_DIR)" "$(CHROOT_DIR)/tmp/qubes-deb";"; \
		mkdir -p "$(CHROOT_DIR)/tmp/qubes-packages-mirror-repo";\
		sudo mount --bind "$(BUILDER_REPO_DIR)" "$(CHROOT_DIR)/tmp/qubes-packages-mirror-repo";\
	fi
	@echo "  --> Synchronize resolv.conf, in case it changed since last run..."
	@sudo cp /etc/resolv.conf "$(CHROOT_DIR)/etc/resolv.conf"

# Create the build chroot, if it does not already exist
$(CHROOT_DIR)/home/user/.prepared_base: $(ARCHLINUX_PLUGIN_DIR)/prepare-chroot-builder
	@echo "--> Archlinux preparing build chroot environment"
	@sudo -E "$(ARCHLINUX_PLUGIN_DIR)/prepare-chroot-builder" "$(CHROOT_DIR)" $(DIST) || exit 1
	@touch "$(CHROOT_DIR)/home/user/.prepared_base"

# dist-prep - some preparation of sources (if needed)
dist-prep:
	@true

# dist-build-dep - install build dependencies (should operate on chroot directory)
dist-build-dep:
	@echo "--> Archlinux dist-build-dep (makefile)"
	@sudo -E "$(ARCHLINUX_PLUGIN_DIR)/update-local-repo.sh" $(DIST)

# dist-package - compile package (should operate on chroot directory)
# TODO: makepkg doesn't seem to honor $http_proxy
dist-package:
	@echo "--> Archlinux dist-package (makefile)"
ifndef PACKAGE
	$(error "PACKAGE need to be set!")
endif
	@echo "  --> Building package in $(DIST_SRC)"
	sudo $(CHROOT_ENV) chroot "$(CHROOT_DIR)" su user -c 'cd "$(DIST_SRC)" && cp $(PACKAGE)/PKGBUILD* ./ && env http_proxy="$(REPO_PROXY)" makepkg --syncdeps --noconfirm --skipinteg'

# dist-copy-out - copy compiled package out of chroot env; this target should
#     move packages to ORIG_SRC (distro-specific subdir) and hardlink them to
#     BUILDER_REPO_DIR
dist-copy-out:
	@echo "--> Archlinux dist-copy-out (makefile)"
	@echo "--> Done:" >&3
	@set -e;\
	for arch_chroot_dir in $(CHROOT_DIR)/$(DIST_SRC)/; do\
		arch_pkg_dir=$(ORIG_SRC)/pkgs;\
		mkdir -p $$arch_pkg_dir;\
		for pkg in $$arch_chroot_dir/*.pkg.tar.*; do\
			echo "      $$arch_pkg_dir/`basename $$pkg`" >&3 ;\
		done;\
		mkdir -p $(BUILDER_REPO_DIR)/pkgs;\
		ln -f -t $(BUILDER_REPO_DIR)/pkgs $$arch_chroot_dir/*.pkg.tar.*;\
	done;\
	mv -t $$arch_pkg_dir $$arch_chroot_dir/*.pkg.tar.*

### Additional targets

# Copies requested packages (based on PACKAGE_SET, COMPONENT, DIST) to
# requested repository (UPDATE_REPO)
update-repo:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
	mkdir -p $(UPDATE_REPO)/pkgs
	for arch_build_dir in $(ARCH_BUILD_DIRS); do\
	  pkgnames=`cat $(ORIG_SRC)/$$arch_build_dir/PKGBUILD | grep pkgname | cut -d "=" -f 2 | tr -d '()"'`;\
	  for pkgname in $$pkgnames; do\
	    ln -f $(ORIG_SRC)/pkgs/$$pkgname-*.pkg.tar.* $(UPDATE_REPO)/pkgs/;\
	  done;\
	done;\

# Sign packages
sign:
	cd $(ORIG_SRC)
	for filename in pkgs/*.pkg.tar.* ; do
	  qubes-gpg-client-wrapper --detatch-sign "$filename" > "$filename.sig"
	done
